Action Hook: add_action('event_name', 'function_name1'[, 'priority', 'args']);

Filter Hook: add_filter('content_name', 'function_name2'[, 'priority', 'args']);

function_name1 must not return any value.
function_name2 MUST return a value. function_name2 must also accept at least one argument which is the name of the content to be modified.

shortcode: It is a wordpress tag to insert HTML code in post and pages. It is enclosed between [ and ]. Similar to HTML tag, it can also contain attributes as well as inner content.

<br> : HTML tag without attribute and without inner content.
<img src='hello.jpg'> HTML tag with attribute but without content.
<p align='center'>Hello HTML</p> : HTML attribute with attribute and inner content.

add_shortcode: Function to define a shortcode.

Options API:
============
get_option($option_name): It will return the value of option.
add_option($option_name, $option_value): It will set the value of option.
update_option($option_name, $option_value): It will change the value of option.
delete_option($option_name): It will delete the option.

$option_value can be a simple variable or an array. In case of simple variable, the value of the option is inserted in the database as it is while in case of array the value of the option is serialized using PHP function and then stored in the database.

Admin Form:
===========

Basic Requirements:
-------------------
1. Action hook admin_menu should be used to add a menu to display form.
2. Function pointed by admin_menu action hook should contain name of function responsible for displaying the form.
3. Body of the form should be written inside the function in such a way that:
	3.a. the action attribute of the form should point to admin-post.php file.
	3.b. there should be at least one hidden variable inside the form with name action.
4. An action hook at run time should be created in the format admin_post_<<value_of_action_variable_of_form>>. The function pointed by this action hook will process the data submitted by the form.
5. Function responsible for processing the form data should finally call the function wp_redirect by passing the required URL to this function where control should go after processing the form. This URL can be easily created using admin_url function.

Optional Features:
------------------
1. wp_nonce_field($arg): The word "nonce" is an abbreviation for the term "number used once" and is a string generated by WordPress which acts as a special token and is used to identify the person doing a specific operation such as the submission of a form. It is used in form body to generate hidden variables to make sure that the request is coming from the current website and not somewhere else.
2. check_admin_referer($arg): Used in function to process form. The value of $arg should be exactly same as that passed in wp_nonce_field function.
3. esc_html: Should be used while displaying the value of a HTML variable in HTML form when value of the variable comes from a PHP variable. It will not interpret HTML tags as HTML tags rather HTML special character code will be displayed. For example esc_html( '<a href="http://www.example.com/">A link</a>' ) will return &lt;a href=&quot;http://www.example.com/&quot;&gt;A link&lt;/a&gt;.
4. The whole form tag should be wrapped inside a div tag having a class wrap like below:
<div class="wrap">
...
...
...
...
</div>
5. The submit button should use class="button-primary".
6. In the function responsible for processing the form, we should check the value returned by the function current_user_can('manage_options'). If this function returns false then we should stop the script from further processing.
7. In the function responsible for processing the form, we should pass the value received from the form to the function sanitize_text_field function before assigning it to the option variable or array. This function performs following actions on the argument passed to it:

	A. Checks for invalid UTF-8,
	B. Converts single < characters to entities
	C. Strips all tags
	D. Removes line breaks, tabs, and extra whitespace
	E. Strips octets

8. In the wp_redirect function, before passing the URL, we should add an extra variable to indicate the fact that form data has been processed successfully. For example, &status=success. Then in the function displaying the form body we can check the value of the variable status and display the success message accordingly.
  
Settings API:
=============
1. Call a function from the action hook admin_init to configure form components. In this function do the following:
	A. Call register_setting('unique_setting_id', 'option_name') function.
	B. Call add_settings_section('section_id', 'section_name', 'section_label_function', 'page') to add a section for a variable of a form.
	C. Call add_settings_field('id', 'name', 'section_variable_function', 'page', 'section_id') to add the variable itself.
	D. Repeat steps B and C as many times as there are variables.
	E. Define the function section_label_function whose output statement will be used as label.
	F. Define the function section_variable_function whose output statement will be used to display variable itself.
2. Call another function from admin_menu hook to display the menu. Then from that function call another function to display the form content. In this function do the following:

	<div class="wrap">
		<?php screen_icon(); ?>
		<h2>My Settins Options</h2>
		<form method="post" action="options.php">
			<?php settings_fields('unique_setting_id'); ?>
			<?php do_settings_sections(__FILE__); ?>
			<?php submit_button();?>
		</form>
	</div>

Widgets API:
============
This API is used to create an interface in the dashboard under the menu Appearance->Widgets so that values of parameters of a custom widget can be updated from here. Widgets appearing in this area can be added to Main Widget Area or Seconday Widget Area. Widgets added to the Main Widget Area are being displayed in the footer of the main website and widgets added to the Seconday Widget Area are being displayed in the sidebar of the main website. Following steps should be followed to make use of this API:

1. Point a function from the action hook widgets_init to register a widget. A widget can be registered using register_widget("custom_widget_class_name") function.

2. The custom_widget_class_name should be extended from the existing class WP_Widget as follows:

class custom_widget_class_name extends WP_Widget
{
	function __construct()
	{
		//It should call the constructor of parent class as follows:

		$this->WP_Widget("custom_widget_id", "message_to_be_displayed_on_title_bar_of_widget_in_dashboard", array("classname"="custom_widget_class_name"));
	}
	function form($instance)
	{
		//Retrieve existing values of widget variables
		$message=$instance["message"];
		$title=$instance["title"];
		
		//Retrieve ID and Name of widget variables using function get_field_id and get_field_name
		
		$title_id=$this->get_field_id("title");
		$title_name=$this->get_field_name("title");
		
		$message_id=$this->get_field_id("message");
		$message_name=$this->get_field_name("message");

		//Display widget form elements using ID, Name and existing values of variables
		echo
		"
			<p>
				<label for='$title_id'>Title:</label>
				<input id='$title_id' name='$title_name' value='$title'>
			</p>
			<p>
				<label for='$message_id'>message:</label>
				<input id='$message_id' name='$message_name' value='$message'>
			</p>
		";
		
	}
	function update($new_instance, $old_instance)
	{
		//$new_instance contains values received from the form
		//$old_instance contains values already stored in the database
		
		//Store existing values available in database to a temporary array
		$instance=$old_instance;
		
		//Overwrite variables with values received from the form
		$instance["title"]=$new_instance["title"];
		$instance["message"]=$new_instance["message"];
		
		//Return back to the environment
		return $instance;
	}
	function widget($args, $instance)
	{
		//Fetch variables from the arguments
		extract($args);
		extract($instance);
		
		//Use them to display widget variables in main website
		echo $before_widget; //widget area starts
			echo $before_title.$title.$after_title; //display $title in title of widget
			echo $message; //display $message below title
		echo $after_widget; //widget are ends
	}
}

Meta Boxes API: API to display a form at the time of adding a post from dashboard. The value set while adding the post can be displayed on the page displaying that post.
===============
1. To add a metabox in dashboard while adding a post:

add_action( 'add_meta_boxes', 'cpl_mb_create' );

function cpl_mb_create()
{
	add_meta_box
	( 
	'cpl_custom_metabox_id', //ID
	'Custom Meta Box', //Title
	'cpl_mb_message',  //Callback Function
	'post',  //Post Type
	'normal', //Context
	'high' //Priority
	);
}

function cpl_mb_message($post)
{
	echo '<h2>Set Reference</h2>';
	$name_value = get_post_meta( $post->ID, '_post_reference_name', true );

	echo '<label for="reference-name">'. 'Reference Name' .'</label>';
	echo '<input type="text" id="reference-name" name="post_reference_name" placeholder="Example" value="'.$name_value.'" size="25"/>';
	echo '<p class="howto">'. 'Add the name of the reference' .'</p>';
}

Here the name of HTML variable is post_reference_name. But while fetching its value from database using get_post_meta function we need to pass its name as _post_reference_name. If the value of last argument of get_post_meta function is false then an array is returned otherwise a single value is returned. In the above example the function get_post_meta has been used to display the existing value of variable post_reference_name in the text box.

2. To save the metabox variable while saving the post:

add_action( 'save_post', 'save_post_reference' );

function save_post_reference( $post_id ) 
{
	$reference_name = $_POST['post_reference_name'];
	update_post_meta( $post_id, '_post_reference_name', $reference_name );
}

3. To display the metabox variable while displaying the post:

add_filter( 'the_content', 'cpl_display_the_content' );

function cpl_display_the_content($content)
{
	$name_value = get_post_meta( get_the_ID(), '_post_reference_name', true );
	$content.="Reference name is $name_value";
	return($content);
}

Custom Post Type: A post can be generalized to any entity such as an employee, a student, a 
================  book etc. All information related the entity can be managed from the wordpress dashboard same as the post is managed. All interface used to manage post can be used to manage such entity. It can be defined as below:

add_action("init","cpl_create_emp_post_type");
function cpl_create_emp_post_type()
{
 $labels = array (
 "name" => "Employee Management System",
 "add_new" => "Add New Employee",
 "add_new_item" => "Add New Employee Record",
 "edit_item" => "Edit Employee",
 "search_items" => "Search Employees",
 "view_item" => "View Employee", 
 "not_found" => "No Employee found"
 );
 $args = array (
 "labels" => $labels,
 "public" => true
 );
 register_post_type("emp",$args);
}

Now just like a post can be of different types of categories, an employee can be of different types. This can be achieved by defining a custom taxonomy for the custom post type emp as below:

add_action("init","cpl_create_emp_post_type");
function cpl_create_emp_post_type()
{
 $labels = array (
 "name" => "Employee Management System",
 "add_new" => "Add New Employee",
 "add_new_item" => "Add New Employee Record",
 "edit_item" => "Edit Employee",
 "search_items" => "Search Employees",
 "view_item" => "View Employee", 
 "not_found" => "No Employee found"
 );
 $args = array (
 "labels" => $labels,
 "public" => true
 );
 register_post_type("emp",$args);
 taxonomies();
}

function taxonomies()
{
 $labels = array(
 "name"=> "Employee Type",
 "add_new"=> "Add New Employee Type",
 "add_new_item"=> "Add New Employee Type",
 "edit"=> "Edit",
 "edit_item"=> "Edit Employee Type Review",
 "new_item"=> "New Employee Type",
 "view"=> "View",
 "view_item"=> "View Employee Type",
 "search_items"=> "Search Employee Types",
 );
 $args = array(
 "labels"=> $labels
 );
 register_taxonomy("Employee-Type","emp",$args);
}

Now Employee Type can also be managed while adding a new employee as well as using a sub menu of "Employee Management System".
